<?php

namespace App\Command;

use App\Dto\UserRegistrationDto;
use App\Service\UserService;
use Faker\Factory;
use Faker\Generator;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Validator\ConstraintViolationInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

#[AsCommand(
    name: 'app:make-user',
    description: 'Makes user through CLI',
)]
class MakeUserCommand extends Command
{
    private Generator $faker;

    public function __construct(
        private readonly UserService $userService,
        private readonly ValidatorInterface $validator,
    ) {
        $this->faker = Factory::create();
        parent::__construct();
    }

    protected function configure(): void
    {
        $this
            ->addArgument('username', InputArgument::REQUIRED, 'Username')
            ->addArgument('email', InputArgument::REQUIRED, 'email')
            ->addOption('password', null, InputOption::VALUE_OPTIONAL, 'password(optional)')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $username = $input->getArgument('username');
        $email = $input->getArgument('email');
        $password = $input->getOption('password') ?? $this->generatePassword();
        $userDto = new UserRegistrationDto($password, $email, $username);
        $violations = $this->validator->validate($userDto);
        if ($violations->count() > 0) {
            $io->error('Validation failed!');
            $this->renderViolations($io, $violations);

            return Command::FAILURE;
        }

        $this->userService->registerUser($userDto);

        $io->success('User created successfully!');
        if (null === $input->getOption('password')) {
            $io->note("The password was autogenerated! Please write it down. Password: {$password}");
        }

        return Command::SUCCESS;
    }

    private function generatePassword(): string
    {
        return $this->faker->password(8, 8);
    }

    /**
     * @param SymfonyStyle $io
     * @param iterable<ConstraintViolationInterface> $violations
     * @return void
     */
    private function renderViolations(SymfonyStyle $io, iterable $violations): void
    {
        $table = $io->createTable();
        $table->setHeaders(['Property', 'Property value', 'Message']);

        foreach ($violations as $violation) {
            $table->addRow([$violation->getPropertyPath(), $violation->getInvalidValue(), $violation->getMessage()]);
        }

        $table->render();
    }
}
